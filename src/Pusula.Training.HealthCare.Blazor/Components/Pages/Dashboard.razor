@page "/dashboard"

@using Microsoft.AspNetCore.Components
@using Pusula.Training.HealthCare.Patients
@using Pusula.Training.HealthCare.Departments
@using Pusula.Training.HealthCare.Doctors
@using Pusula.Training.HealthCare.Appointments
@using Pusula.Training.HealthCare.AppointmentTypes
@using Pusula.Training.HealthCare.Shared
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject NavigationManager NavigationManager
@inject AppointmentsAppService AppointmentsAppService
@inherits HealthCareComponentBase
@inject IAppointmentTypeAppService AppointmentTypeAppService

<div class="control-section">
    <div class="filter-section">
    <div>
        <h3>Filtreleme Seçenekleri</h3>
        <div class="filter-box">
                <div class="filter-item">
            <label>Başlangıç Tarihi:</label>
                    <SfDatePicker @bind-Value="@(Filter.StartDate)" CssClass="e-custom"> </SfDatePicker>
            </div>
                <div class="filter-item">
                    <label>Bitiş Tarihi:</label>
                    <SfDatePicker @bind-Value="@(Filter.EndDate)" CssClass="e-custom"> </SfDatePicker>
                </div>
                <div class="filter-item">
                    <label>Randevu Türleri:</label>
                    <SfDropDownList DataSource="@FilteredAppointmentTypes"
                                            Placeholder="Select Appointment Type"
                                            @bind-Value="@Filter.AppointmentTypeId"
                                            CssClass="e-custom">
                                <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                            </SfDropDownList>
                </div>
                <div class="filter-item">
                    <button class="btn custom-add-button" @onclick="LoadAppointmentsAsync">Filtrele</button>
                </div>
                <div class="filter-item">
                    <button class="btn custom-delete-button" @onclick="ClearFilters">Temizle</button>
                </div>
        </div>
        </div>
    </div>
    <div class="chart-container">
    <div class="chart-section">
         <!-- Randevu Durumlarına Göre Grafik -->
        <SfAccumulationChart Title="Randevu Durumlarına Göre Dağılım">
            <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
            <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@ChartData" XName="Name" YName="Count" InnerRadius="40%">
                    <AccumulationDataLabelSettings Visible="true" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
                </AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
        </SfAccumulationChart>
    </div>
    <!-- Departmanlara Göre Grafik -->
    <div class="chart-section">
        <SfAccumulationChart Title="Departmanlara Göre Dağılım">
            <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
            <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@DepartmentChartData" XName="Name" YName="Count" InnerRadius="40%">
                    <AccumulationDataLabelSettings Visible="true" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
                </AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
        </SfAccumulationChart>
    </div>
     <!-- Cinsiyetlere Göre Grafik -->
    <div class="chart-section">
        <SfAccumulationChart Title="Cinsiyete Göre Dağılım">
            <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
            <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@GenderChartData" XName="Name" YName="Count" InnerRadius="40%">
                    <AccumulationDataLabelSettings Visible="true" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
                </AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
        </SfAccumulationChart>
    </div>
    </div>
</div>

@code {
    private List<ChartDataDto> ChartData = new List<ChartDataDto>();
    private List<ChartDataDto> DepartmentChartData = new List<ChartDataDto>();
    private List<ChartDataDto> GenderChartData = new List<ChartDataDto>();
    private List<AppointmentStatus> AppointmentStatuses = new List<AppointmentStatus>();
    private int PageSize { get; } = LimitedResultRequestDto.DefaultMaxResultCount;
    private int CurrentPage { get; set; } = 1;
    private string CurrentSorting { get; set; } = string.Empty;
    private IReadOnlyList<LookupDto<Guid>> AppointmentTypesCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<Gender>> GendersCollection { get; set; } = new List<LookupDto<Gender>>();
    private GetAppointmentsInput Filter { get; set; }
    private List<Pusula.Training.HealthCare.AppointmentTypes.AppointmentTypeDto> FilteredAppointmentTypes { get; set; } = new();
    
    private List<DepartmentDto> FilteredDepartments = new();
    private List<DoctorWithNavigationPropertiesDto> FilteredDoctors = new();
    
    public Dashboard()
    {
        Filter = new GetAppointmentsInput
            {
                MaxResultCount = 100,
                SkipCount = (CurrentPage - 1) * PageSize,
                Sorting = CurrentSorting
            };
        
    }
    protected override async Task OnInitializedAsync()
    {
        GendersCollection = Enum.GetValues(typeof(Gender))
                .Cast<Gender>()
                .Select(b => new LookupDto<Gender> { Id = b, DisplayName = b.ToString() })
                .ToList();
        var input = new GetAppointmentTypesInput
            {
                MaxResultCount = 100,
                SkipCount = (CurrentPage - 1) * PageSize,
                Sorting = CurrentSorting
            };
        var result = await AppointmentTypeAppService.GetListAsync(input);
        if (result?.Items != null)
        {
            FilteredAppointmentTypes = result.Items.ToList();
        }
        await LoadAppointmentsAsync();
        await GetAppointmentTypeCollectionLookupAsync();
    }
    private async Task LoadAppointmentsAsync()
    {
        var input = new GetAppointmentsInput
            {
                StartDate = Filter?.StartDate,
                EndDate = Filter?.EndDate,
                Note = null,
                AppointmentStatus = null,
                IsBlock = null,
                PatientId = null,
                AppointmentTypeId = Filter?.AppointmentTypeId,
                DoctorId = null, 
                DepartmentId = null,
                MaxResultCount = 100,
                SkipCount = (CurrentPage - 1) * PageSize,
                Sorting = CurrentSorting
            };

        var result = await AppointmentsAppService.GetListAsync(input);
        ChartData = result.Items
            .GroupBy(a => a.Appointment.AppointmentStatus)
            .Select(group => new ChartDataDto
                {
                    Name = group.Key.ToString(),
                    Count = group.Count()
                })
            .ToList();

        DepartmentChartData = result.Items
            .GroupBy(a => a.Department.Name)
            .Select(group => new ChartDataDto
                {
                    Name = group.Key,
                    Count = group.Count()
                })
            .ToList();

        GenderChartData = result.Items
            .GroupBy(a => a.Patient.Gender.ToString())
            .Select(group => new ChartDataDto
                {
                    Name = group.Key,
                    Count = group.Count()
                })
            .ToList();

    }
    private async Task ClearFilters()
    {
        // Başlangıç ve Bitiş Tarihi sıfırlanır
        Filter.StartDate = null;
        Filter.EndDate = null;

        // Randevu türü sıfırlanır
        Filter.AppointmentTypeId = null;
         Filter = new GetAppointmentsInput
            {
                MaxResultCount = 100,
                SkipCount = (CurrentPage - 1) * PageSize,
                Sorting = CurrentSorting
            };
        
        // İstenirse, filtreleme işlemini tekrar yapabilirsiniz
        await LoadAppointmentsAsync();
    }

    private async Task GetAppointmentTypeCollectionLookupAsync(string? newValue = null)
    {
        AppointmentTypesCollection = (await AppointmentsAppService.GetAppointmentTypeLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }
    
    public class ChartDataDto
    {
        public string Name { get; set; }
        public int Count { get; set; }
    }
}

<style>
    .chart-container {
        display: flex;
        flex-wrap: wrap; /* Ekran daraldığında taşmasını engellemek için wrap kullanıyoruz */
        justify-content: space-around; /* Grafikleri yatayda eşit aralıklarla hizalar */
        gap: 20px;
        margin: 20px 0;
        background-color: #fff; /* Ortak beyaz arka plan */
        padding: 20px; /* Kapsayıcıya iç boşluk ekliyoruz */
        border-radius: 10px; /* Kapsayıcıya yuvarlatılmış köşeler */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Hafif gölge */
    }

    .chart-section {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
        width: 100%;
        max-width: 650px; /* Grafiklerin en fazla 500px genişliğinde olmasını sağlar */
    }

    .chart-container > .chart-section:nth-child(3) {
        flex-basis: 100%; /* Cinsiyet grafiğini diğerlerinden alt kısma yerleştirir */
        text-align: center; /* Ortalanmasını sağlar */
    }

    .filter-section {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
    }

    .filter-box {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        align-items: center;
    }

    .filter-item {
        display: flex;
        flex-direction: column;
        gap: 5px;
        min-width: 200px;
    }

        .filter-item label {
            font-weight: bold;
            font-size: 14px;
        }

    .chart-section {
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #fff;
    }
</style>

