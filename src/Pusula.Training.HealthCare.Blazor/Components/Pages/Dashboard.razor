@page "/dashboard"

@using Microsoft.AspNetCore.Components
@using Pusula.Training.HealthCare.Patients
@using Pusula.Training.HealthCare.Departments
@using Pusula.Training.HealthCare.Doctors
@using Pusula.Training.HealthCare.Blazor.Containers
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject NavigationManager NavigationManager
@inject PatientStateContainer StateService
@inject DoctorStateContainer DoctorStateService
@inject DepartmentStateContainer DepartmentStateService
@inherits HealthCareComponentBase
@inject IDoctorsAppService DoctorsAppService
@inject IDepartmentsAppService DepartmentsAppService

<div class="stepper-container" style="max-width: 1500px; margin: 0 auto; padding: 40px;">
    <div class="card">
        <div class="card-body">
            <h3 class="card-title text-center">Doktor ve Departman Seçimi</h3>

            <!-- Seçilen Veriler -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card selected-card">
                        <h5>Seçilenler</h5>
                        <p><strong>Doktor:</strong> @($"{SelectedDoctor?.Title.Name} {SelectedDoctor?.User.Name} {SelectedDoctor?.User.Surname}")</p>
                        <p><strong>Departman:</strong> @SelectedDepartment?.Name</p>
                        <button class="btn btn-outline-danger btn-sm" @onclick="ClearSelections" style="width: 100%;">Seçimi Temizle</button>
                    </div>
                </div>
            </div>

            <!-- Doktor ve Departman Seçim Alanları -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <h4>Hekim</h4>
                    <input type="text" class="form-control" @bind="DoctorSearchText" @oninput="FilterDoctors" placeholder="Doktor ara..." />
                    <ul class="list-group">
                        @foreach (var doctor in FilteredDoctors)
                        {
                            <li class="list-group-item @GetSelectedClass(doctor)" @onclick="() => SelectDoctor(doctor)">
                                @($"{doctor.Title?.Name} {doctor.User?.Name} {doctor.User?.Surname}")
                            </li>
                        }
                    </ul>
                </div>
                <div class="col-md-6">
                    <h4>Departman</h4>
                    <input type="text" class="form-control" @bind="DepartmentSearchText" @oninput="FilterDepartments" placeholder="Departman ara..." />
                    <ul class="list-group">
                        @foreach (var department in FilteredDepartments)
                        {
                            <li class="list-group-item @GetSelectedClass(department)" @onclick="() => SelectDepartment(department)">
                                @department.Name
                            </li>
                        }
                    </ul>
                </div>
            </div>

            <div class="d-flex justify-content-between mt-4">
                <button class="btn btn-primary" @onclick="ProceedToAppointments" disabled="@(SelectedDoctor == null || SelectedDepartment == null)">İleri</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string DoctorSearchText = string.Empty;
    private string DepartmentSearchText = string.Empty;

    private List<DoctorWithNavigationPropertiesDto> AllDoctors = new();
    private List<DepartmentDto> AllDepartments = new();

    private List<DoctorWithNavigationPropertiesDto> FilteredDoctors = new();
    private List<DepartmentDto> FilteredDepartments = new();

    private DoctorWithNavigationPropertiesDto SelectedDoctor;
    private DepartmentDto SelectedDepartment;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialDataAsync();
    }

    private async Task LoadInitialDataAsync()
    {
        var doctorResult = await DoctorsAppService.GetListAsync(new GetDoctorsInput());
        if (doctorResult?.Items != null)
        {
            AllDoctors = doctorResult.Items.ToList();
            FilteredDoctors = AllDoctors;
        }

        var departmentResult = await DepartmentsAppService.GetListAsync(new GetDepartmentsInput());
        if (departmentResult?.Items != null)
        {
            AllDepartments = departmentResult.Items.ToList();
            FilteredDepartments = AllDepartments;
        }
    }

    private void FilterDoctors()
    {
        FilteredDoctors = AllDoctors
        .Where(d => string.IsNullOrEmpty(DoctorSearchText) ||
                    d.User.Name.Contains(DoctorSearchText, StringComparison.OrdinalIgnoreCase))
        .ToList();
        StateHasChanged();
    }

    private void FilterDepartments()
    {
        FilteredDepartments = FilteredDepartments
            .Where(d => string.IsNullOrEmpty(DepartmentSearchText) ||
                        d.Name.Contains(DepartmentSearchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task SelectDoctor(DoctorWithNavigationPropertiesDto doctor)
    {
        SelectedDoctor = doctor;

        if (doctor != null)
        {
            var doctorWithDepartments = await DoctorsAppService.GetWithDepartmentsAsync(doctor.Doctor.Id);
            if (doctorWithDepartments?.Departments != null)
            {
                FilteredDepartments = doctorWithDepartments.Departments
                    .Select(dd => new DepartmentDto { Id = dd.Id, Name = dd.Name })
                    .ToList();
            }
        }
        else
        {
            FilteredDepartments.Clear();
        }
    }

    private async Task SelectDepartment(DepartmentDto department)
    {
        SelectedDepartment = department;

        /*if (department != null)
        {
            var departmentWithDoctors = await DepartmentsAppService.GetDoctorsByDepartmentIdAsync(department.Id);
            if (departmentWithDoctors?.Doctors != null)
            {
                FilteredDoctors = departmentWithDoctors.Doctors
                    .Select(dd => new DoctorWithNavigationPropertiesDto
                        {
                            Doctor = dd.Doctor,
                            Title = dd.Title,
                            User = dd.User,
                        })
                    .ToList();
            }
        }
        else
        {
            FilteredDoctors.Clear();
        }*/
    }

    private void ClearSelections()
    {
        SelectedDoctor = null;
        SelectedDepartment = null;
        DoctorSearchText = string.Empty;
        DepartmentSearchText = string.Empty;
        FilteredDoctors = AllDoctors;
        FilteredDepartments = AllDepartments;
    }

    private string GetSelectedClass(object item)
    {
        if (item is DoctorWithNavigationPropertiesDto doctor && SelectedDoctor == doctor)
            return "selected-item";
        if (item is DepartmentDto department && SelectedDepartment == department)
            return "selected-item";
        return string.Empty;
    }

    private void ProceedToAppointments()
    {
        //Seçilen Departman ve Doctor bilgileri Randevu Özet Kartına Aktarılır
        DoctorStateService.SelectedDoctor = SelectedDoctor;
        DepartmentStateService.SelectedDepartment = SelectedDepartment;
        NavigationManager.NavigateTo("/appointment");
    }
}




<style>
    .stepper-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 40px;
    }

    .card {
        padding: 30px;
        border: 1px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .card-body {
        padding: 20px;
    }

    .selected-card {
        padding: 15px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .card-title {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 20px;
    }

    h4 {
        font-size: 22px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    input[type="text"] {
        font-size: 16px;
        padding: 10px;
        width: 100%;
        margin-bottom: 15px;
        border-radius: 4px;
        border: 1px solid #ddd;
    }

    ul.list-group {
        max-height: 350px;
        overflow-y: auto;
        padding-left: 0;
        margin-bottom: 15px;
    }

    .list-group-item {
        font-size: 18px;
        cursor: pointer;
        padding: 12px 15px;
        border: 1px solid #f0f0f0;
        margin-bottom: 5px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        .list-group-item:hover {
            background-color: #f0f0f0;
        }

    .selected-item {
        background-color: #cce5ff;
        color: #0056b3;
        font-weight: bold;
    }

    button {
        font-size: 16px;
        padding: 8px 16px;
        border-radius: 5px;
        width: 100%;
    }

        button:disabled {
            background-color: #ddd;
            cursor: not-allowed;
        }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .d-flex {
        display: flex;
        justify-content: space-between;
    }

    .mt-4 {
        margin-top: 40px;
    }

    .mb-4 {
        margin-bottom: 20px;
    }

    @@media (max-width: 768px) {
        .row {
            flex-direction: column;
        }

        .col-md-6 {
            width: 100%;
        }
    }

    .patient-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        overflow: hidden;
        background-color: #f8f9fa; /* Hafif bir arka plan rengi */
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Hafif bir gölge efekti */
        max-width: 1100px; /* Kart genişliği */
        margin: auto; /* Ortala */
    }

    ul.list-group {
        max-height: 350px;
        height: 350px; /* Sabit yükseklik */
        overflow-y: auto;
    }
</style>

