@page "/appointment"

@using Syncfusion.Blazor.Navigations
@using System.Threading.Tasks
@using System.Linq
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Pusula.Training.HealthCare.Appointments
@using Pusula.Training.HealthCare.Patients
@using Pusula.Training.HealthCare.Departments
@using Pusula.Training.HealthCare.Doctors
@using Pusula.Training.HealthCare.Blazor.Containers
@using Pusula.Training.HealthCare.Shared

@inject PatientStateContainer StateService
@inject IAppointmentsAppService AppointmentsAppService
@inject IDepartmentsAppService DepartmentsAppService
@inject IDoctorsAppService DoctorsAppService


<div class="stepper-container" style="max-width: 1500px; margin: 0 auto; padding: 40px;">
    <div class="card">
        <div class="card-body">

            <!-- Hasta Seçim Alanları -->
            @*<h3 class="card-title text-center">Doktor ve Departman Seçimi</h3>*@
            <!-- Seçilen Veriler -->

           @* <div class="row mb-4">
                <div class="col-12">
                    <div class="card selected-card">
                        <h5>Seçilenler</h5>
                        <p><strong>Doktor:</strong> @($"{SelectedDoctor?.Title.Name} {SelectedDoctor?.User.Name} {SelectedDoctor?.User.Surname}")</p>
                        <p><strong>Departman:</strong> @SelectedDepartment?.Name</p>
                        <button class="btn btn-outline-danger btn-sm" @onclick="ClearSelections" style="width: 100%;">Seçimi Temizle</button>
                    </div>
                </div>
            </div> *@

            <!-- Doktor ve Departman Seçim Alanları -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <h4>Departman</h4>
                    <SfDropDownList TValue="Guid" 
                        TItem="DepartmentDto" 
                        Placeholder="Departman seçiniz..." 
                        DataSource="@FilteredDepartments">
                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="Guid" TItem="DepartmentDto" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-md-6">
                    <h4>Doktor</h4>
                    <SfDropDownList DataSource="@FilteredDoctors"
                                    Placeholder="Doktor seçiniz..."
                                    TItem="DoctorWithNavigationPropertiesDto"
                                    TValue="Guid">
                        <DropDownListFieldSettings Value="Doctor.Id" Text="FullName"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="Guid" TItem="DoctorWithNavigationPropertiesDto" ValueChange="OnDoctorValueChange"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>
        </div>
    </div>
</div>

<SfSchedule TValue="FlatAppointmentDto" Width="100%" Height="650px" @bind-CurrentView="@CurrentView" @ref="SfScheduleInstance">
    <ScheduleTemplates >
        <EditorTemplate>
            <table class="custom-event-editor" width="100%" cellpadding="5">
                <tbody>                    <tr>
                        <td class="e-textlabel">Appointment Type</td>
                        <td colspan="4">
                            <SfDropDownList DataSource="@AppointmentTypesCollection"
                                            Placeholder="Select Appointment Type"
                                            @bind-Value="@NewAppointment.AppointmentTypeId">
                                <DropDownListFieldSettings Value="Id" Text="DisplayName"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Start Date</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="@NewAppointment.StartDate" TValue="DateTime"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">End Date</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="@NewAppointment.EndDate" TValue="DateTime" Validation="@ValidationRules"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Status</td>
                        <td colspan="4">
                    <SfDropDownList DataSource="@AppointmentStatusCollection"
                                    Placeholder="Choose Status"
                                    @bind-Value="@NewAppointment.AppointmentStatus">
                        <DropDownListFieldSettings Value="Id" Text="DisplayName"></DropDownListFieldSettings>
                    </SfDropDownList>
                    </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Note</td>
                        <td colspan="4">
                            <SfTextBox Multiline="true" @bind-Value="@NewAppointment.Note"></SfTextBox>
                        </td>
                    </tr>
                </tbody>
            </table>
        </EditorTemplate>
        <EditorFooterTemplate>
            <button id="saveButton" class="e-control e-btn e-primary" data-ripple="true" @onclick="CreateAndCloseModal">Save</button>
        </EditorFooterTemplate>
    </ScheduleTemplates>

    <ScheduleEventSettings TValue="FlatAppointmentDto" DataSource="@AppointmentList" EnableTooltip="true">
    </ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
    </ScheduleViews>
</SfSchedule>
@code {

    private SfSchedule<FlatAppointmentDto> SfScheduleInstance;
    //private DateTime CurrentDate { get; set; } = DateTime.Now;
    View CurrentView = View.WorkWeek;
    Syncfusion.Blazor.Schedule.ValidationRules ValidationRules = new Syncfusion.Blazor.Schedule.ValidationRules { Required = true };
    //private AppointmentCreateDto NewAppointment { get; set; } = new AppointmentCreateDto();
    private AppointmentUpdateDto EditAppointment { get; set; } = new AppointmentUpdateDto();
    private IReadOnlyList<LookupDto<Guid>> PatientsCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<Guid>> DoctorsCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<Guid>> DepartmentsCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<Guid>> AppointmentTypesCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<AppointmentStatus>> AppointmentStatusCollection { get; set; } = new List<LookupDto<AppointmentStatus>>();
    private List<FlatAppointmentDto> AppointmentList { get; set; } = new List<FlatAppointmentDto>();
    private AppointmentCreateDto NewAppointment { get; set; } = new AppointmentCreateDto
        {
            StartDate = DateTime.Now, // Bugünün tarihi
            EndDate = DateTime.Now.AddHours(1) // 1 saat sonrası
        };
    private List<DoctorWithNavigationPropertiesDto> AllDoctors = new();
    private List<DepartmentDto> AllDepartments = new();

    private DoctorWithNavigationPropertiesDto SelectedDoctor;
    private DepartmentDto SelectedDepartment;

    private List<DepartmentDto> FilteredDepartments = new();
    private List<DoctorWithNavigationPropertiesDto> FilteredDoctors = new();

    protected override async Task OnInitializedAsync()
    {
        // Fetch lookup data
        await GetPatientCollectionLookupAsync();
        await GetDoctorCollectionLookupAsync();
        await GetDepartmentCollectionLookupAsync();
        await GetAppointmentTypeCollectionLookupAsync();

        // Appointment Status
        AppointmentStatusCollection = Enum.GetValues(typeof(AppointmentStatus))
            .Cast<AppointmentStatus>()
            .Select(b => new LookupDto<AppointmentStatus> { Id = b, DisplayName = b.ToString() })
            .ToList();

        await LoadInitialDataAsync();
    }
    private async Task LoadInitialDataAsync()
    {

        var departmentResult = await DepartmentsAppService.GetListAsync(new GetDepartmentsInput());
        if (departmentResult?.Items != null)
        {
            FilteredDepartments = departmentResult.Items.ToList();
        }

        var doctorResult = await DoctorsAppService.GetListAsync(new GetDoctorsInput());
        if(doctorResult?.Items != null)
        {
            AllDoctors = doctorResult.Items.ToList();
            FilteredDoctors = AllDoctors
            .Select(d => new DoctorWithNavigationPropertiesDto
                {
                    Doctor = d.Doctor,
                    Title = d.Title,
                    User = d.User,
                    FullName = $"{d.Title?.Name} {d.User?.Name} {d.User?.Surname}" // FullName oluşturuldu
                })
            .ToList();
        }
    }
    private async Task LoadAppointmentsAsync()
    {
        var input = new GetAppointmentsInput
                {
                    StartDate = null,
                    EndDate = null,
                    Note = null,
                    AppointmentStatus = null, 
                    PatientId = null,
                    AppointmentTypeId = null,
                    DoctorId = SelectedDoctor?.Doctor?.Id, //Doctorun randevularını getirme filtresi
                    DepartmentId = SelectedDepartment?.Id //Departmanın randevularını getirme filtresi
                };

        var result = await AppointmentsAppService.GetListAsync(input);

        AppointmentList = result.Items.Select(a => new FlatAppointmentDto
                {
                    Id = a.Appointment.Id.GetHashCode(),
                    Subject = a.AppointmentType.Name,
                    StartTime = a.Appointment.StartDate,
                    EndTime = a.Appointment.EndDate
                }).ToList();

    }
    private async Task OnDepartmentValueChange(ChangeEventArgs<Guid, DepartmentDto> args)
    {
        // Seçilen departmanın Id'si
        Guid selectedDepartmentId = args.Value;

        // Seçilen departman objesi
        DepartmentDto selectedDepartment = FilteredDepartments.FirstOrDefault(d => d.Id == selectedDepartmentId);

        if (selectedDepartment != null)
        {
            await SelectDepartmentAsync(selectedDepartment);
        }
    }

    private async Task OnDoctorValueChange(ChangeEventArgs<Guid, DoctorWithNavigationPropertiesDto> args)
    {
        // Seçilen departmanın Id'si
        Guid selectedDoctorId = args.Value;

        // Seçilen departman objesi
        DoctorWithNavigationPropertiesDto selectedDoctor = FilteredDoctors.FirstOrDefault(d => d.Doctor.Id == selectedDoctorId);

        if (selectedDoctor != null)
        {
            await SelectDoctorAsync(selectedDoctor);
        }
    }

    private async Task SelectDoctorAsync(DoctorWithNavigationPropertiesDto doctor)
    {
        SelectedDoctor = doctor;
        await LoadAppointmentsAsync();  //Seçilen doktroun randevularını getirmek için çağırıldı
        await Task.CompletedTask;
    }
    private async Task SelectDepartmentAsync(DepartmentDto department)
    {
        SelectedDepartment = department;

        if (department != null)
        {
            // Seçilen departmana ait doktorları listelemek için
            var departmentWithDoctors = await DepartmentsAppService.GetDoctorsByDepartmentIdAsync(department.Id);
            if (departmentWithDoctors != null)
            {
                FilteredDoctors = departmentWithDoctors
                    .Select(dd => new DoctorWithNavigationPropertiesDto
                        {
                            Doctor = dd.Doctor,
                            Title = dd.Title,
                            User = dd.User,
                            FullName = $"{dd.Title.Name} {dd.User.Name} {dd.User.Surname}"
                        })
                    .ToList();

                await LoadAppointmentsAsync();
            }
        }
        else
        {
            FilteredDoctors.Clear();
        }
        await Task.CompletedTask;
    }

    private async Task CreateAndCloseModal()
    {
        await CreateAppointment();// Randevu oluşturma işlemini çağır
        await LoadAppointmentsAsync(); // Verileri yeniden yükle
                                       // await SfScheduleInstance.Refresh(); // Takvimi güncelle
        SfScheduleInstance.CloseEditor(); // Modalı kapat

    }

    private async Task CreateAppointment()
    {
        try
        {
            NewAppointment.DoctorId = SelectedDoctor.Doctor.Id;
            NewAppointment.PatientId = StateService.SelectedPatient.Id;
            NewAppointment.DepartmentId = SelectedDepartment.Id;
                                                               // Call your service to create the appointment
            var createdAppointment = await AppointmentsAppService.CreateAsync(NewAppointment);   
       
        }
        catch (Exception ex)
        {
            // Handle the error
            Console.WriteLine($"Error creating appointment: {ex.Message}");
        }
    }

    private async Task GetPatientCollectionLookupAsync(string? newValue = null)
    {
        PatientsCollection = (await AppointmentsAppService.GetPatientLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }

    private async Task GetDoctorCollectionLookupAsync(string? newValue = null)
    {
        DoctorsCollection = (await AppointmentsAppService.GetDoctorLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }

    private async Task GetDepartmentCollectionLookupAsync(string? newValue = null)
    {
        DepartmentsCollection = (await AppointmentsAppService.GetDepartmentLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }

    private async Task GetAppointmentTypeCollectionLookupAsync(string? newValue = null)
    {
        AppointmentTypesCollection = (await AppointmentsAppService.GetAppointmentTypeLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }

    public class FlatAppointmentDto
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public bool IsBlock { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }

}

<style>
    .patient-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        overflow: hidden;
        background-color: #f8f9fa; /* Hafif bir arka plan rengi */
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Hafif bir gölge efekti */
        max-width: 1100px; /* Kart genişliği */
        margin: auto; /* Ortala */
    }

        .patient-card .avatar {
            width: 90px; /* Avatar boyutu */
            height: 90px;
            object-fit: cover;
        }

        .patient-card .card-body {
            padding: 20px;
        }

        .patient-card h5 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
        }
</style>