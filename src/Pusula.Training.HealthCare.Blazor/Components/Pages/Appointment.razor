@page "/appointment"

@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@using Pusula.Training.HealthCare.Blazor.Containers
@using System.Globalization
@using System.IO
@using System.Timers
@using Pusula.Training.HealthCare.Patients
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.SplitButtons
@inject PatientStateContainer StateService

<div class="card patient-card mb-3">
    <div class="row g-0 align-items-center" style="height: 150px; max-width: 1100px; margin: auto;">
        <!-- Avatar Bölümü -->
        <div class="col-md-2 d-flex align-items-center justify-content-start">
            <img src="/images/main/avatar.jpg" class="img-fluid rounded-circle avatar" alt="Patient Avatar" />
        </div>
        <div class="col-md-10">
            <div class="card-body">
                <h5 class="card-title mb-1">@StateService.SelectedPatient.FirstName @StateService.SelectedPatient.LastName</h5>
                <p class="card-text text-muted">@StateService.SelectedPatient.IdentityNumber</p>

                <div class="row">
                    <div class="col-md-6 mb-2">
                        <span class="fw-bold">Birthdate:</span> @StateService.SelectedPatient.BirthDate.ToShortDateString()
                    </div>
                    <div class="col-md-6 mb-2">
                        <span class="fw-bold">Gender:</span>
                        @switch (StateService.SelectedPatient.Gender)
                        {
                            case Gender.Unspecified:
                                <span>Unspecified</span>
                                break;
                            case Gender.Male:
                                <span>Male</span>
                                break;
                            case Gender.Female:
                                <span>Female</span>
                                break;
                            case Gender.Other:
                                <span>Other</span>
                                break;
                            default:
                                <span>Unknown</span>
                                break;
                        }
                    </div>
                    <div class="col-md-6 mb-2">
                        <span class="fw-bold">Email:</span> @StateService.SelectedPatient.Email
                    </div>
                    <div class="col-md-6 mb-2">
                        <span class="fw-bold">Mobile Phone:</span> @StateService.SelectedPatient.MobilePhoneNumber
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="control-section">
    <div class="schedule-overview">
        <SfToolbar Width="auto" CssClass="overview-toolbar" Height="70px" OverflowMode="OverflowMode.Scrollable" ScrollStep="100">
            <ToolbarItems>
                <ToolbarItem PrefixIcon="e-icons e-plus" TooltipText="New Event" Text="New Event" OnClick="OnNewEventAdd" TabIndex=0></ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-day" TooltipText="Day" Text="Day" OnClick="OnDayView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-week" TooltipText="Week" Text="Week" OnClick="OnWeekView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-week" TooltipText="WorkWeek" Text="WorkWeek" OnClick="OnWorkWeekView" TabIndex=0></ToolbarItem>
                <ToolbarItem PrefixIcon="e-icons e-agenda-date-range" TooltipText="Agenda" Text="Agenda" OnClick="OnAgendaView" TabIndex=0></ToolbarItem>
                <ToolbarItem TooltipText="Timeline Views" TabIndex=0>
                    <Template>
                        <div class="template">
                            <label>
                                <div class="icon-child">
                                    <SfCheckBox @ref="ViewRef" HtmlAttributes="@htmlAttribute" TChecked="bool" ValueChange="OnViewChange"></SfCheckBox>
                                </div>
                                <div class="text-child">Timeline Views</div>
                            </label>
                        </div>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
                <ToolbarItem TooltipText="Grouping" TabIndex=0>
                    <Template>
                        <div class="template">
                            <label>
                                <div class="icon-child">
                                    <SfCheckBox Checked="@EnableGroup" TChecked="bool" ValueChange="OnGroupChange" title="Grouping Resource"></SfCheckBox>
                                </div>
                                <div class="text-child">Grouping</div>
                            </label>
                        </div>
                    </Template>
                </ToolbarItem>
                
            </ToolbarItems>
            <ToolbarEvents Created="OnToolbarCreated"></ToolbarEvents>
        </SfToolbar>
        <div class="overview-content">
            <div class="left-panel">
                <div class="overview-scheduler">
                    <SfSchedule @ref="ScheduleRef" TValue="AppointmentData" CssClass="schedule-overview" Width="100%" Height="100%" @bind-SelectedDate="@SelectedDate" @bind-CurrentView="@CurrentView" Timezone="@TimezoneData.Value" FirstDayOfWeek="@FirstDayOfWeek" ShowWeekNumber="@ShowWeekNumber" WeekRule="@WeekRule" WorkDays="@WorkDays" StartHour="@DayStartHour" EndHour="@DayEndHour" EnableAutoRowHeight="@isRowAutoHeight" TimeFormat="@TimeFormat">
                        <ScheduleGroup Resources="@GroupData"></ScheduleGroup>
                        <ScheduleResources>
                            <ScheduleResource TValue="int[]" TItem="CalendarData" DataSource="@Calendars" Query="@ResourceQuery" Field="CalendarId" Title="Calendars" Name="Calendars" TextField="CalendarName" IdField="CalendarId" ColorField="CalendarColor" AllowMultiple="true"></ScheduleResource>
                        </ScheduleResources>
                        <ScheduleViews>
                            <ScheduleView Option="View.Day"></ScheduleView>
                            <ScheduleView Option="View.Week"></ScheduleView>
                            <ScheduleView Option="View.WorkWeek"></ScheduleView>
                            <ScheduleView Option="View.Month"></ScheduleView>
                            <ScheduleView Option="View.Year"></ScheduleView>
                            <ScheduleView Option="View.Agenda"></ScheduleView>
                            <ScheduleView Option="View.TimelineDay"></ScheduleView>
                            <ScheduleView Option="View.TimelineWeek"></ScheduleView>
                            <ScheduleView Option="View.TimelineWorkWeek"></ScheduleView>
                            <ScheduleView Option="View.TimelineMonth"></ScheduleView>
                            <ScheduleView Option="View.TimelineYear"></ScheduleView>
                        </ScheduleViews>
                        <ScheduleTemplates>
                            <DateHeaderTemplate>
                                <div class="date-text">@(((context as TemplateContext).Date).ToString("dd", CultureInfo.InvariantCulture))</div>
                                <div class="date-text">@(((context as TemplateContext).Date).ToString("ddd", CultureInfo.InvariantCulture))</div>
                                @{
                                    @switch ((int)(context as TemplateContext).Date.DayOfWeek)
                                    {
                                        
                                    }
                                }
                            </DateHeaderTemplate>
                        </ScheduleTemplates>
                        <ScheduleTimeScale Enable="@EnableTimeScale" Interval="@SlotInterval" SlotCount="@SlotCount"></ScheduleTimeScale>
                        <ScheduleWorkHours Start="@WorkStartHour" End="@WorkEndHour"></ScheduleWorkHours>
                        <ScheduleEventSettings TValue="@AppointmentData" DataSource="@DataSource" EnableTooltip="@TooltipEnable"></ScheduleEventSettings>
                    </SfSchedule>
                    <SfContextMenu TValue="MenuItem" CssClass="schedule-context-menu" Target=".e-schedule">
                        <MenuItems>
                            <MenuItem Text="New Event" IconCss="e-icons e-plus" Id="Add" Hidden="@isCell"></MenuItem>
                            <MenuItem Text="New Recurring Event" IconCss="e-icons e-repeat" Hidden="@isCell" Id="AddRecurrence"></MenuItem>
                            <MenuItem Text="Today" IconCss="e-icons e-timeline-today" Id="Today" Hidden="@isCell"></MenuItem>
                            <MenuItem Text="Edit Event" IconCss="e-icons e-edit" Id="Save" Hidden="@isEvent"></MenuItem>
                            <MenuItem Text="Edit Event" IconCss="e-icons e-edit" Id="EditRecurrenceEvent" Hidden="@isRecurrence">
                                <MenuItems>
                                    <MenuItem Text="Edit Occurrence" Id="EditOccurrence"></MenuItem>
                                    <MenuItem Text="Edit Series" Id="EditSeries"></MenuItem>
                                </MenuItems>
                            </MenuItem>
                            <MenuItem Text="Delete Event" IconCss="e-icons e-trash" Id="Delete" Hidden="@isEvent"></MenuItem>
                            <MenuItem Text="Delete Event" IconCss="e-icons e-trash" Id="DeleteRecurrenceEvent" Hidden="@isRecurrence">
                                <MenuItems>
                                    <MenuItem Text="Delete Occurrence" Id="DeleteOccurrence"></MenuItem>
                                    <MenuItem Text="Delete Series" Id="DeleteSeries"></MenuItem>
                                </MenuItems>
                            </MenuItem>
                        </MenuItems>
                        <MenuEvents TValue="MenuItem" OnOpen="OnOpen" ItemSelected="OnItemSelected"></MenuEvents>
                    </SfContextMenu>
                </div>
            </div>
            <div class="right-panel @((this.IsSettingsVisible ? "" : "hide"))">
                <div class="control-panel e-css">
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Calendar</label>
                        </div>
                        <div class="col-right">
                            <SfMultiSelect @ref="ResourceRef" TValue="int[]" TItem="CalendarData" CssClass="schedule-resource" Mode="@VisualMode.CheckBox" DataSource="@Calendars" EnableSelectionOrder="false" ShowDropDownIcon="true" ShowClearButton="false" @bind-Value="@SelectedResource">
                                <MultiSelectFieldSettings Text="CalendarName" Value="CalendarId"></MultiSelectFieldSettings>
                                <MultiSelectEvents TValue="int[]" TItem="CalendarData" ValueChange="OnResourceChange"></MultiSelectEvents>
                            </SfMultiSelect>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">First Day of Week</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="WeekDays" TValue="int" @bind-Value="@FirstDayOfWeek" DataSource="@WeekCollection">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="int" ValueChange="OnWeekDaysChange" TItem="WeekDays"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Work week</label>
                        </div>
                        <div class="col-right">
                            <SfMultiSelect TValue="int[]" TItem="WeekDays" CssClass="schedule-workweek" Mode="@VisualMode.CheckBox" DataSource="@WeekCollection" EnableSelectionOrder="false" ShowDropDownIcon="true" @bind-Value="@WorkDays">
                                <MultiSelectFieldSettings Text="Name" Value="Value"></MultiSelectFieldSettings>
                                <MultiSelectEvents TValue="int[]" TItem="WeekDays" ValueChange="OnWorkDaysChange"></MultiSelectEvents>
                            </SfMultiSelect>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Day Start Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@ScheduleStartHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnDayStartHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Day End Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@ScheduleEndHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnDayEndHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Work Start Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@StartWorkHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnWorkStartHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Work End Hour</label>
                        </div>
                        <div class="col-right">
                            <SfTimePicker TValue="DateTime?" Format="HH:mm" @bind-Value="@EndWorkHour" ShowClearButton="false">
                                <TimePickerEvents TValue="DateTime?" ValueChange="OnWorkEndHourChange"></TimePickerEvents>
                            </SfTimePicker>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Slot Duration</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="SlotData" TValue="int" PopupHeight="150px" DataSource="@SlotIntervalDataSource" @bind-Value="@SlotInterval">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                                <DropDownListEvents TItem="SlotData" TValue="int" ValueChange="OnSlotIntervalChange"></DropDownListEvents>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Slot Interval</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="SlotData" TValue="int" PopupHeight="150px" DataSource="@SlotCountDataSource" @bind-Value="@SlotCount">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Time Format</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="TimeFormatData" TValue="string" PopupHeight="150px" DataSource="@TimeFormatDataSource" @bind-Value="@TimeFormat">
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Week Numbers</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="WeekNumbers" TValue="string" PopupHeight="150px" DataSource="@WeekNumbersData" @bind-Value="@WeeklyRule">
                                <DropDownListEvents TItem="WeekNumbers" TValue="string" ValueChange="OnWeekNumberChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                    <div class="col-row">
                        <div class="col-left">
                            <label style="line-height: 34px; margin: 0;">Tooltip</label>
                        </div>
                        <div class="col-right">
                            <SfDropDownList TItem="Tooltip" TValue="string" PopupHeight="150px" DataSource="@TooltipData" @bind-Value="@Tooltipvalue">
                                <DropDownListEvents TItem="Tooltip" TValue="string" ValueChange="OnTooltipChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Value"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    SfTextBox SubjectRef;
    SfCheckBox<bool> ViewRef;
    SfTextBox DescriptionRef;
    SfMultiSelect<int[], CalendarData> ResourceRef;
    SfSchedule<AppointmentData> ScheduleRef;
    SfDropDownList<int, CalendarData> CalendarRef;
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public bool IsAllDay { get; set; }
        public bool IsReadonly { get; set; }
        public int CalendarId { get; set; }
        public int? RecurrenceID { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public string StartTimezone { get; set; }
        public string EndTimezone { get; set; }
        public AppointmentData() { }
        public AppointmentData(int Id, string Subject, DateTime StartTime, DateTime EndTime, string Location, string Description, bool IsAllDay, bool IsReadonly, int CalendarId, int RecurrenceID, string RecurrenceRule, string RecurrenceException)
        {
            this.Id = Id;
            this.Subject = Subject;
            this.StartTime = StartTime;
            this.EndTime = EndTime;
            this.Location = Location;
            this.Description = Description;
            this.IsAllDay = IsAllDay;
            this.IsReadonly = IsReadonly;
            this.CalendarId = CalendarId;
            this.RecurrenceID = RecurrenceID;
            this.RecurrenceRule = RecurrenceRule;
            this.RecurrenceException = RecurrenceException;
        }
        public List<AppointmentData> GetEvents()
        {
            List<AppointmentData> EventData = new List<AppointmentData>();
            DateTime YearStart = new DateTime(DateTime.Now.Year, 1, 1);
            DateTime YearEnd = new DateTime(DateTime.Now.Year, 12, 31);
            string[] EventSubjects = new string[] {
                "Bering Sea Gold", "Technology", "Maintenance", "Meeting", "Travelling", "Annual Conference", "Birthday Celebration", "Farewell Celebration",
                "Wedding Anniversary", "Alaska: The Last Frontier", "Deadliest Catch", "Sports Day", "MoonShiners", "Close Encounters", "HighWay Thru Hell",
                "Daily Planet", "Cash Cab", "Basketball Practice", "Rugby Match", "Guitar Class", "Music Lessons", "Doctor checkup", "Brazil - Mexico",
                "Opening ceremony", "Final presentation"
    };
            DateTime CurrentDate = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Sunday);
            DateTime Start = new DateTime(CurrentDate.Year, CurrentDate.Month, CurrentDate.Day, 10, 0, 0);
            DateTime End = new DateTime(CurrentDate.Year, CurrentDate.Month, CurrentDate.Day, 11, 30, 0);
            return EventData;
        }
    }
    public class CalendarData
    {
        public string CalendarName { get; set; }
        public string CalendarColor { get; set; }
        public int CalendarId { get; set; }
    }
    public class WeekDays
    {
        public string Name { get; set; }
        public int Value { get; set; }
    }
    public class SlotData : WeekDays { }
    public class TimeFormatData
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    public class WeekNumbers
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    public class Tooltip
    {
        public string Name { get; set; }
        public string Value { get; set; }
    }
    public class Timezone
    {
        public string Name { get; set; }
        public string Key { get; set; }
        public string Value { get; set; }
    }
    List<AppointmentData> DataSource = new AppointmentData().GetEvents();
    public AppointmentData EventData { get; set; }
    public CellClickEventArgs CellData { get; set; }
    private bool isCell { get; set; }
    private bool isEvent { get; set; }
    private bool isRecurrence { get; set; }
    private int SlotCount { get; set; } = 2;
    private int SlotInterval { get; set; } = 60;
    private int FirstDayOfWeek { get; set; } = 0;
    private bool EnableGroup { get; set; } = true;
    private bool TooltipEnable { get; set; } = false;
    private bool isRowAutoHeight { get; set; } = false;
    private bool EnableTimeScale { get; set; } = true;
    private bool ShowWeekNumber { get; set; } = false;
    private bool isQuickInfoCreated { get; set; } = false;
    private CalendarWeekRule WeekRule { get; set; } = CalendarWeekRule.FirstDay;
    private string WeeklyRule { get; set; } = "Off";
    private string Tooltipvalue { get; set; } = "Off";
    private View CurrentView { get; set; } = View.WorkWeek;
    private string SelectedView { get; set; } = "Week";
    private string DayStartHour { get; set; } = "00:00";
    private string DayEndHour { get; set; } = "24:00";
    private string WorkStartHour { get; set; } = "09:00";
    private string WorkEndHour { get; set; } = "18:00";
    private string TimeFormat { get; set; } = "hh:mm tt";
    private bool IsSettingsVisible { get; set; } = false;
    public string[] GroupData = new string[] { "Calendars" };
    //private DateTime SystemTime { get; set; } = DateTime.UtcNow;
    private DateTime SystemTime { get; set; } = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Turkey Standard Time"));
    private DateTime SelectedDate { get; set; } = DateTime.UtcNow;
    private DateTime? StartWorkHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 9, 0, 0);
    private DateTime? EndWorkHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 18, 0, 0);
    private DateTime? ScheduleStartHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 0, 0, 0);
    private DateTime? ScheduleEndHour { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 23, 59, 59);
    private int[] SelectedResource { get; set; } = new int[] { 1 };
    private int[] WorkDays { get; set; } = new int[] { 1, 2, 3, 4, 5 };
    //private Timezone TimezoneData { get; set; } = new Timezone() { Name = "UTC+00:00", Key = "UTC", Value = "UTC" };
    private Timezone TimezoneData { get; set; } = new Timezone() { Name = "UTC+03:00", Key = "Turkey Standard Time", Value = "Europe/Istanbul" };
    private Query ResourceQuery { get; set; } = new Query().Where(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = 1 });
    public List<CalendarData> Calendars { get; set; } = new List<CalendarData> {
        new CalendarData { CalendarName = "My Calendar", CalendarId = 1, CalendarColor = "#c43081" },
    };
    private List<SlotData> SlotIntervalDataSource = new List<SlotData>() {
        new SlotData() { Name = "1 hour", Value = 60 },
        new SlotData() { Name = "1.5 hours", Value = 90 },
        new SlotData() { Name = "2 hours", Value = 120 },
        new SlotData() { Name = "2.5 hours", Value = 150 },
        new SlotData() { Name = "3 hours", Value = 180 },
        new SlotData() { Name = "3.5 hours", Value = 210 },
        new SlotData() { Name = "4 hours", Value = 240 },
        new SlotData() { Name = "4.5 hours", Value = 270 },
        new SlotData() { Name = "5 hours", Value = 300 },
        new SlotData() { Name = "5.5 hours", Value = 330 },
        new SlotData() { Name = "6 hours", Value = 360 },
        new SlotData() { Name = "6.5 hours", Value = 390 },
        new SlotData() { Name = "7 hours", Value = 420 },
        new SlotData() { Name = "7.5 hours", Value = 450 },
        new SlotData() { Name = "8 hours", Value = 480 },
        new SlotData() { Name = "8.5 hours", Value = 510 },
        new SlotData() { Name = "9 hours", Value = 540 },
        new SlotData() { Name = "9.5 hours", Value = 570 },
        new SlotData() { Name = "10 hours", Value = 600 },
        new SlotData() { Name = "10.5 hours", Value = 630 },
        new SlotData() { Name = "11 hours", Value = 660 },
        new SlotData() { Name = "11.5 hours", Value = 690 },
        new SlotData() { Name = "12 hours", Value = 720 }
    };
    private List<SlotData> SlotCountDataSource = new List<SlotData>() {
        new SlotData() { Name = "1", Value = 1 },
        new SlotData() { Name = "2", Value = 2 },
        new SlotData() { Name = "3", Value = 3 },
        new SlotData() { Name = "4", Value = 4 },
        new SlotData() { Name = "5", Value = 5 },
        new SlotData() { Name = "6", Value = 6 },
        new SlotData() { Name = "7", Value = 7 },
        new SlotData() { Name = "8", Value = 8 },
        new SlotData() { Name = "9", Value = 9 },
        new SlotData() { Name = "10", Value = 10 }
    };
    private List<TimeFormatData> TimeFormatDataSource = new List<TimeFormatData>()
{
        new TimeFormatData() { Name = "12 hours", Value = "hh:mm tt" },
        new TimeFormatData() { Name = "24 hours", Value = "HH:mm" }
    };
    private List<WeekNumbers> WeekNumbersData = new List<WeekNumbers>()
{
        new WeekNumbers() { Name = "Off", Value = "Off" },
        new WeekNumbers() { Name = "First Day Of Year", Value = "FirstDay" },
        new WeekNumbers() { Name = "First Full Week", Value = "FirstFullWeek" },
        new WeekNumbers() { Name = "First Four-Day Week", Value = "FirstFourDayWeek" }
    };
    private List<Tooltip> TooltipData = new List<Tooltip>()
{
        new Tooltip() { Name = "Off", Value = "Off" },
        new Tooltip() { Name = "On", Value = "On" }
    };
    private List<string> ScheduleViews { get; set; } = new List<string>() { "Day", "Week", "WorkWeek", "Month", "Year", "Agenda", "TimelineDay", "TimelineWeek", "TimelineWorkWeek", "TimelineMonth", "TimelineYear" };
    private List<WeekDays> WeekCollection { get; set; } = new List<WeekDays>() {
        new WeekDays () { Name = "Pazartesi", Value = 1 },
        new WeekDays () { Name = "Salı", Value = 2 },
        new WeekDays () { Name = "Çarşamba", Value = 3 },
        new WeekDays () { Name = "Perşmebe", Value = 4 },
        new WeekDays () { Name = "Cuma", Value = 5 }
    };
    private List<Timezone> TimezoneCollection { get; set; } = new List<Timezone>() {
        new Timezone () { Name = "UTC-08:00", Key = "Pacific Standard Time", Value = "America/Los_Angeles" },
        new Timezone () { Name = "UTC-07:00", Key = "Mountain Standard Time", Value = "America/Denver" },
        new Timezone () { Name = "UTC-06:00", Key = "Central Standard Time", Value = "America/Chicago" },
        new Timezone () { Name = "UTC-05:00", Key = "Eastern Standard Time", Value = "America/New_York" },
        new Timezone () { Name = "UTC-04:00", Key = "Atlantic Standard Time", Value = "Atlantic/Bermuda" },
        new Timezone () { Name = "UTC-03:00", Key = "Greenland Standard Time", Value = "Atlantic/Stanley" },
        new Timezone () { Name = "UTC-02:00", Key = "Mid-Atlantic Standard Time", Value = "America/Sao_Paulo" },
        new Timezone () { Name = "UTC-01:00", Key = "Cape Verde Standard Time", Value = "Atlantic/Cape_Verde" },
        new Timezone () { Name = "UTC+00:00", Key = "UTC", Value = "UTC" },
        new Timezone () { Name = "UTC+01:00", Key = "Romance Standard Time", Value = "Europe/Paris" },
        new Timezone () { Name = "UTC+03:00", Key = "Russian Standard Time", Value = "Europe/Moscow" },
        new Timezone () { Name = "UTC+03:00", Key = "Turkey Standard Time", Value = "Europe/Istanbul" },
        new Timezone () { Name = "UTC+05:30", Key = "India Standard Time", Value = "Asia/Kolkata" },
        new Timezone () { Name = "UTC+08:00", Key = "W. Australia Standard Time", Value = "Australia/Perth" },
        new Timezone () { Name = "UTC+10:00", Key = "E. Australia Standard Time", Value = "Australia/Brisbane" },
        new Timezone () { Name = "UTC+10:30", Key = "Lord Howe Standard Time", Value = "Australia/Adelaide" },
        new Timezone () { Name = "UTC+13:00", Key = "New Zealand Standard Time", Value = "Pacific/Auckland" }
    };
    private Dictionary<string, object> htmlAttribute = new Dictionary<string, object>() {
        {"tabindex", "-1" }
    };
    private void OnViewChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        switch (this.CurrentView)
        {
            case View.Day:
            case View.TimelineDay:
                this.CurrentView = args.Checked ? View.TimelineDay : View.Day;
                break;
            case View.Week:
            case View.TimelineWeek:
                this.CurrentView = args.Checked ? View.TimelineWeek : View.Week;
                break;
            case View.WorkWeek:
            case View.TimelineWorkWeek:
                this.CurrentView = args.Checked ? View.TimelineWorkWeek : View.WorkWeek;
                break;
            case View.Month:
            case View.TimelineMonth:
                this.CurrentView = args.Checked ? View.TimelineMonth : View.Month;
                break;
            case View.Year:
            case View.TimelineYear:
                this.CurrentView = args.Checked ? View.TimelineYear : View.Year;
                break;
            case View.Agenda:
                this.CurrentView = View.Agenda;
                break;
        }
    }
    private async void OnNewEventAdd()
    {
        DateTime Date = this.ScheduleRef.SelectedDate;
        DateTime Start = new DateTime(Date.Year, Date.Month, Date.Day, DateTime.Now.Hour, 0, 0);
        AppointmentData eventData = new AppointmentData
            {
                Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
                Subject = "Add title",
                StartTime = Start,
                EndTime = Start.AddHours(1),
                Location = "",
                Description = "",
                IsAllDay = false,
                CalendarId = this.ResourceRef.Value[0]
            };
        await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Add);
    }
    private async void OnNewRecurringEventAdd()
    {
        DateTime Date = this.ScheduleRef.SelectedDate;
        DateTime Start = new DateTime(Date.Year, Date.Month, Date.Day, DateTime.Now.Hour, 0, 0);
        AppointmentData eventData = new AppointmentData
            {
                Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
                Subject = "Add title",
                StartTime = Start,
                EndTime = Start.AddHours(1),
                Location = "",
                Description = "",
                IsAllDay = false,
                CalendarId = this.ResourceRef.Value[0],
                RecurrenceRule = "FREQ=DAILY;INTERVAL=1;"
            };
        await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Add);
    }
    private void OnDayView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineDay : View.Day;
    }
    private void OnWeekView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineWeek : View.Week;
    }
    private void OnWorkWeekView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineWorkWeek : View.WorkWeek;
    }
    private void OnMonthView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineMonth : View.Month;
    }
    private void OnYearView()
    {
        this.CurrentView = this.ViewRef.Checked ? View.TimelineYear : View.Year;
    }
    private void OnAgendaView()
    {
        this.CurrentView = View.Agenda;
    }
    private async void OnSettingsClick()
    {
        this.IsSettingsVisible = !this.IsSettingsVisible;
        StateHasChanged();
        await this.ScheduleRef.RefreshEventsAsync();
    }
    private string GetEventDetails(AppointmentData data)
    {
        return data.StartTime.ToString("dddd dd, MMMM yyyy", CultureInfo.InvariantCulture) + " (" + data.StartTime.ToString(TimeFormat, CultureInfo.InvariantCulture) + "-" + data.EndTime.ToString(TimeFormat, CultureInfo.InvariantCulture) + ")";
    }
    private string GetHeaderStyles(AppointmentData data)
    {
        if (data.Id == default(int))
        {
            return "align-items: center ; color: #919191;";
        }
        else
        {
            CalendarData resData = GetResourceData(data);
            return "background:" + (resData == null ? "#007bff" : resData.CalendarColor) + "; color: #FFFFFF;";
        }
    }
    private async Task SetFocus()
    {
        if (isQuickInfoCreated)
        {
            await Task.Delay(20);
            await SubjectRef.FocusAsync();
        }
    }
    private async Task OnQuickInfoSubjectCreated()
    {
        await Task.Yield();
        await SubjectRef.FocusAsync();
        isQuickInfoCreated = true;
    }
    public void OnToolbarCreated()
    {
        Timer timer = new Timer(1000);
        timer.Elapsed += new ElapsedEventHandler((object sender, ElapsedEventArgs e) =>
        {
            string key = this.TimezoneData.Key ?? "UTC";
            SystemTime = this.TimeConvertor(key);
            ScheduleRef?.PreventRender();
            InvokeAsync(() => { StateHasChanged(); });
        });
        timer.Enabled = true;
    }
    private CalendarData GetResourceData(AppointmentData data)
    {
        if (data.CalendarId != 0)
        {
            int resourceId = SelectedResource.Where(item => item == data.CalendarId).FirstOrDefault();
            CalendarData resourceData = this.Calendars.Where(item => item.CalendarId == resourceId).FirstOrDefault();
            return resourceData;
        }
        return null;
    }
    private DateTime TimeConvertor(string TimeZoneId)
    {
        return TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(TimeZoneId));
    }
    private async void OnMoreDetailsClick(MouseEventArgs args, AppointmentData data, bool isEventData)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
        if (isEventData == false)
        {
            AppointmentData eventData = new AppointmentData
                {
                    Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
                    Subject = SubjectRef.Value ?? "",
                    StartTime = data.StartTime,
                    EndTime = data.EndTime,
                    Location = data.Location,
                    Description = DescriptionRef.Value ?? "",
                    IsAllDay = data.IsAllDay,
                    CalendarId = CalendarRef.Value,
                    RecurrenceException = data.RecurrenceException,
                    RecurrenceID = data.RecurrenceID,
                    RecurrenceRule = data.RecurrenceRule
                };
            await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Add);
        }
        else
        {
            AppointmentData eventData = new AppointmentData
                {
                    Id = data.Id,
                    Subject = data.Subject,
                    Location = data.Location,
                    Description = data.Description,
                    StartTime = data.StartTime,
                    EndTime = data.EndTime,
                    IsAllDay = data.IsAllDay,
                    CalendarId = data.CalendarId,
                    RecurrenceException = data.RecurrenceException,
                    RecurrenceID = data.RecurrenceID,
                    RecurrenceRule = data.RecurrenceRule
                };
            if (!string.IsNullOrEmpty(eventData.RecurrenceRule))
            {
                await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.EditOccurrence);
            }
            else
            {
                await ScheduleRef.OpenEditorAsync(eventData, CurrentAction.Save);
            }
        }
    }
    private async Task OnDelete(AppointmentData data)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
        await ScheduleRef.DeleteEventAsync(data, !string.IsNullOrEmpty(data.RecurrenceRule) ? CurrentAction.DeleteOccurrence : CurrentAction.Delete);
    }
    private async Task OnAdd(MouseEventArgs args, AppointmentData data)
    {
        await ScheduleRef.CloseQuickInfoPopupAsync();
        AppointmentData cloneData = new AppointmentData
            {
                Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
                Subject = SubjectRef.Value ?? "Add title",
                Description = DescriptionRef.Value ?? "Add notes",
                StartTime = data.StartTime,
                EndTime = data.EndTime,
                CalendarId = CalendarRef.Value,
                Location = data.Location,
                IsAllDay = data.IsAllDay,
                RecurrenceException = data.RecurrenceException,
                RecurrenceID = data.RecurrenceID,
                RecurrenceRule = data.RecurrenceRule
            };
        await ScheduleRef.AddEventAsync(cloneData);
    }
    public void OnWeekNumberChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, WeekNumbers> args)
    {
        switch (args.Value)
        {
            case "Off":
                this.ShowWeekNumber = false;
                break;
            case "FirstDay":
                this.ShowWeekNumber = true;
                this.WeekRule = CalendarWeekRule.FirstDay;
                break;
            case "FirstFullWeek":
                this.ShowWeekNumber = true;
                this.WeekRule = CalendarWeekRule.FirstFullWeek;
                break;
            case "FirstFourDayWeek":
                this.ShowWeekNumber = true;
                this.WeekRule = CalendarWeekRule.FirstFourDayWeek;
                break;
        }
    }
    public void OnWeekDaysChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, WeekDays> args)
    {
        this.FirstDayOfWeek = args.Value;
    }
    public void OnWorkDaysChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        if (args.Value != null)
        {
            this.WorkDays = args.Value;
        }
    }
    public void OnDayStartHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text))
        {
            this.DayStartHour = args.Text;
        }
    }
    public void OnDayEndHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text))
        {
            this.DayEndHour = args.Text;
        }
    }
    public void OnWorkStartHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text))
        {
            this.WorkStartHour = args.Text;
        }
    }
    public void OnWorkEndHourChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<DateTime?> args)
    {
        if (!string.IsNullOrEmpty(args.Text))
        {
            this.WorkEndHour = args.Text;
        }
    }
    public void OnTimezoneChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Timezone> args)
    {
        this.TimezoneData = args.ItemData;
        var zones = TimeZoneInfo.GetSystemTimeZones();
        SystemTime = this.TimeConvertor(this.TimezoneData.Key);
    }
    public void OnResourceChange(Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<int[]> args)
    {
        WhereFilter predicate = new WhereFilter();
        if (args.Value != null)
        {
            predicate = new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 0 ? args.Value[0] : 0 }.
                Or(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 1 ? args.Value[1] : 0 }).
                Or(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 2 ? args.Value[2] : 0 }).
                Or(new WhereFilter() { Field = "CalendarId", Operator = "equal", value = args.Value.Count() > 3 ? args.Value[3] : 0 });
        }
        else
        {
            predicate = new WhereFilter() { Field = "CalendarId", Operator = "equal", value = 1 };
        }
        this.ResourceQuery = new Query().Where(predicate);
    }
    public void OnGroupChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableGroup = args.Checked;
        this.GroupData = args.Checked ? new string[] { "Calendars" } : null;
    }
    public void OnTimeScaleChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.EnableTimeScale = args.Checked;
    }
    public void OnRowAutoHeightChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        this.isRowAutoHeight = args.Checked;
    }
    public void OnTooltipChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Tooltip> args)
    {
        switch (args.Value)
        {
            case "Off":
                this.TooltipEnable = false;
                break;
            case "On":
                this.TooltipEnable = true;
                break;
        }
    }
    public void OnSlotIntervalChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, SlotData> args)
    {
        this.SlotInterval = args.Value;
    }
    public void OnSlotCountChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, SlotData> args)
    {
        this.SlotCount = args.Value;
    }
    public async Task OnFileUploadChange(UploadChangeEventArgs args)
    {
        foreach (Syncfusion.Blazor.Inputs.UploadFiles file in args.Files)
        {
            StreamReader reader = new StreamReader(file.File.OpenReadStream(long.MaxValue));
            string fileContent = await reader.ReadToEndAsync();
            await ScheduleRef.ImportICalendarAsync(fileContent);
        }
    }
    public async void OnPrintClick()
    {
        await ScheduleRef.PrintAsync();
    }
    public async Task OnOpen(BeforeOpenCloseMenuEventArgs<MenuItem> args)
    {
        if (args.ParentItem == null && args.Left != null && args.Top != null)
        {
            CellData = await ScheduleRef.GetTargetCellAsync((int)args.Left, (int)args.Top);
            await ScheduleRef.CloseQuickInfoPopupAsync();
            if (CellData == null)
            {
                EventData = await ScheduleRef.GetTargetEventAsync((int)args.Left, (int)args.Top);
                if (EventData.Id == 0)
                {
                    args.Cancel = true;
                }
                if (EventData.RecurrenceRule != null)
                {
                    isCell = isEvent = true;
                    isRecurrence = false;
                }
                else
                {
                    isCell = isRecurrence = true;
                    isEvent = false;
                }
            }
            else
            {
                isCell = false;
                isEvent = isRecurrence = true;
            }
        }
    }
    public async Task OnItemSelected(MenuEventArgs<MenuItem> args)
    {
        var SelectedMenuItem = args.Item.Id;
        var ActiveCellsData = await ScheduleRef.GetSelectedCellsAsync();
        if (ActiveCellsData == null)
        {
            ActiveCellsData = CellData;
        }
        switch (SelectedMenuItem)
        {
            case "Today":
                string key = this.TimezoneData.Key ?? "UTC";
                SelectedDate = this.TimeConvertor(key);
                break;
            case "Add":
                await ScheduleRef.OpenEditorAsync(ActiveCellsData, CurrentAction.Add);
                break;
            case "AddRecurrence":
                AppointmentData RecurrenceEventData = null;
                var resourceDetails = ScheduleRef.GetResourceByIndex(ActiveCellsData.GroupIndex);
                RecurrenceEventData = new AppointmentData
                    {
                        Id = await ScheduleRef.GetMaxEventIdAsync<int>(),
                        StartTime = ActiveCellsData.StartTime,
                        EndTime = ActiveCellsData.EndTime,
                        CalendarId = resourceDetails.GroupData.CalendarId,
                        RecurrenceRule = "FREQ=DAILY;INTERVAL=1;"
                    };
                await ScheduleRef.OpenEditorAsync(RecurrenceEventData, CurrentAction.Add);
                break;
            case "Save":
                await ScheduleRef.OpenEditorAsync(EventData, CurrentAction.Save);
                break;
            case "EditOccurrence":
                await ScheduleRef.OpenEditorAsync(EventData, CurrentAction.EditOccurrence);
                break;
            case "EditSeries":
                List<AppointmentData> Events = await ScheduleRef.GetEventsAsync();
                EventData = (AppointmentData)Events.Where(data => data.Id == EventData.RecurrenceID).FirstOrDefault();
                await ScheduleRef.OpenEditorAsync(EventData, CurrentAction.EditSeries);
                break;
            case "Delete":
                await ScheduleRef.DeleteEventAsync(EventData);
                break;
            case "DeleteOccurrence":
                await ScheduleRef.DeleteEventAsync(EventData, CurrentAction.DeleteOccurrence);
                break;
            case "DeleteSeries":
                await ScheduleRef.DeleteEventAsync(EventData, CurrentAction.DeleteSeries);
                break;
        }
        
    }
}

