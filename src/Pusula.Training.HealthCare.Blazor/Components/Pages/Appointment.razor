@page "/appointment"

@using Syncfusion.Blazor.Navigations
@using System.Threading.Tasks
@using System.Linq
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Pusula.Training.HealthCare.Appointments
@using Pusula.Training.HealthCare.Patients
@using Pusula.Training.HealthCare.Blazor.Containers
@using Pusula.Training.HealthCare.Shared

@inject PatientStateContainer StateService
@inject DoctorStateContainer DoctorStateService
@inject DepartmentStateContainer DepartmentStateService
@inject IAppointmentsAppService AppointmentsAppService
<div class="card patient-card mb-3">
    <div class="row g-0 align-items-center" style="height: 150px; max-width: 1100px; margin: auto;">
        <!-- Avatar Bölümü -->
        <div class="col-md-2 d-flex align-items-center justify-content-start">
            <img src="/images/main/avatar.jpg" class="img-fluid rounded-circle avatar" alt="Patient Avatar" />
        </div>

        <!-- Hasta Bilgileri -->
        <div class="col-md-7">
            <div class="card-body">
                <h5 class="card-title mb-1">@StateService.SelectedPatient.FirstName @StateService.SelectedPatient.LastName</h5>
                <p class="card-text text-muted">@StateService.SelectedPatient.IdentityNumber</p>

                <div class="row">
                    <div class="col-md-6 mb-2">
                        <span class="fw-bold">Birthdate:</span> @StateService.SelectedPatient.BirthDate.ToShortDateString()
                        (@(DateTime.Now.Year - StateService.SelectedPatient.BirthDate.Year -
                           (DateTime.Now.DayOfYear < StateService.SelectedPatient.BirthDate.DayOfYear ? 1 : 0)) Age)
                    </div>

                    <div class="col-md-6 mb-2">
                        <span class="fw-bold">Email:</span> @StateService.SelectedPatient.Email
                    </div>
                    <div class="col-md-6 mb-2">
                        <span class="fw-bold">Mobile Phone:</span> @StateService.SelectedPatient.MobilePhoneNumber
                    </div>
                </div>
            </div>
        </div>

        <!-- Doktor ve Departman Bilgileri -->

        <div class="col-md-3 text-start">
            <div class="card-body">
                <h6 class="fw-bold">Doctor Information</h6>
                <p>
                    <span class="fw-bold">Doctor:</span> @DoctorStateService.SelectedDoctor.Title.Name @DoctorStateService.SelectedDoctor.User.Name @DoctorStateService.SelectedDoctor.User.Surname
                </p>
                <p>
                    <span class="fw-bold">Department:</span> @DepartmentStateService.SelectedDepartment.Name
                </p>
            </div>
        </div>
    </div>
</div>

<SfSchedule TValue="AppointmentCreateDto" Width="100%" Height="650px" @bind-SelectedDate="@CurrentDate">
    <ScheduleTemplates>
        <EditorTemplate>
            <table class="custom-event-editor" width="100%" cellpadding="5">
                <tbody>                    <tr>
                        <td class="e-textlabel">Appointment Type</td>
                        <td colspan="4">
                            <SfDropDownList DataSource="@AppointmentTypesCollection"
                                            Placeholder="Select Appointment Type"
                                            @bind-Value="@NewAppointment.AppointmentTypeId">
                                <DropDownListFieldSettings Value="Id" Text="DisplayName"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Start Date</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="@NewAppointment.StartDate"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">End Date</td>
                        <td colspan="4">
                            <SfDateTimePicker @bind-Value="@NewAppointment.EndDate"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Status</td>
                        <td colspan="4">
                            <SfDropDownList DataSource="@AppointmentStatusCollection"
                                            Placeholder="Choose Status"
                                            @bind-Value="@NewAppointment.AppointmentStatus">
                                <DropDownListFieldSettings Value="Id" Text="DisplayName"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Note</td>
                        <td colspan="4">
                            <SfTextBox Multiline="true" @bind-Value="@NewAppointment.Note"></SfTextBox>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="5">
                            <SfButton OnClick="CreateAppointment">Create Appointment</SfButton>
                        </td>
                    </tr>
                </tbody>
            </table>
        </EditorTemplate>
    </ScheduleTemplates>

    <ScheduleEventSettings DataSource="@AppointmentList"></ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day"></ScheduleView>
        <ScheduleView Option="View.Week"></ScheduleView>
        <ScheduleView Option="View.WorkWeek"></ScheduleView>
    </ScheduleViews>
</SfSchedule>
@code {

    private DateTime CurrentDate = DateTime.Now;
    private AppointmentCreateDto NewAppointment { get; set; } = new AppointmentCreateDto();
    private IReadOnlyList<LookupDto<Guid>> PatientsCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<Guid>> DoctorsCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<Guid>> DepartmentsCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<Guid>> AppointmentTypesCollection { get; set; } = new List<LookupDto<Guid>>();
    private IReadOnlyList<LookupDto<AppointmentStatus>> AppointmentStatusCollection { get; set; } = new List<LookupDto<AppointmentStatus>>();
    private List<AppointmentWithNavigationPropertiesDto> AppointmentList { get; set; } = new List<AppointmentWithNavigationPropertiesDto>();
    protected override async Task OnInitializedAsync()
    {
        // Fetch lookup data
        await GetPatientCollectionLookupAsync();
        await GetDoctorCollectionLookupAsync();
        await GetDepartmentCollectionLookupAsync();
        await GetAppointmentTypeCollectionLookupAsync();

        // Appointment Status
        AppointmentStatusCollection = Enum.GetValues(typeof(AppointmentStatus))
            .Cast<AppointmentStatus>()
            .Select(b => new LookupDto<AppointmentStatus> { Id = b, DisplayName = b.ToString() })
            .ToList();
    }

    private async Task CreateAppointment()
    {
        try
        {
            // Call your service to create the appointment
            var createdAppointment = await AppointmentsAppService.CreateAsync(NewAppointment);

            if (createdAppointment != null)
            {
                NewAppointment = new AppointmentCreateDto();
            }
        }
        catch (Exception ex)
        {
            // Handle the error
            Console.WriteLine($"Error creating appointment: {ex.Message}");
        }
    }

    private async Task GetPatientCollectionLookupAsync(string? newValue = null)
    {
        PatientsCollection = (await AppointmentsAppService.GetPatientLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }

    private async Task GetDoctorCollectionLookupAsync(string? newValue = null)
    {
        DoctorsCollection = (await AppointmentsAppService.GetDoctorLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }

    private async Task GetDepartmentCollectionLookupAsync(string? newValue = null)
    {
        DepartmentsCollection = (await AppointmentsAppService.GetDepartmentLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }

    private async Task GetAppointmentTypeCollectionLookupAsync(string? newValue = null)
    {
        AppointmentTypesCollection = (await AppointmentsAppService.GetAppointmentTypeLookupAsync(new LookupRequestDto { Filter = newValue })).Items;
    }
}



<style>
    .patient-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        overflow: hidden;
        background-color: #f8f9fa; /* Hafif bir arka plan rengi */
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1); /* Hafif bir gölge efekti */
        max-width: 1100px; /* Kart genişliği */
        margin: auto; /* Ortala */
    }

        .patient-card .avatar {
            width: 90px; /* Avatar boyutu */
            height: 90px;
            object-fit: cover;
        }

        .patient-card .card-body {
            padding: 20px;
        }

        .patient-card h5 {
            font-size: 1.25rem;
            margin-bottom: 0.5rem;
        }
</style>