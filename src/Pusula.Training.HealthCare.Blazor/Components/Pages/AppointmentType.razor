@page "/appointment-types"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Pusula.Training.HealthCare.Shared;
@using Pusula.Training.HealthCare.AppointmentTypes
@using Pusula.Training.HealthCare.Doctors
@using Volo.Abp;
@inject IDoctorsAppService DoctorsAppService
@inject IAppointmentTypeAppService AppointmentTypeAppService

<SfToast @ref="ToastObj" />
<div class="row mb-2">
    <div class="col text-end">
        <button class="btn btn-success" @onclick="OpenAddModal">+ Add Appointment Type</button>
    </div>
</div>
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <SfGrid DataSource="@AppointmentTypeList" AllowPaging="true" Toolbar="@(new string[] {"Add"})" OnToolbarClick="OnToolbarClick">
            <GridColumns>
                <GridColumn Field="Name" HeaderText="Appointment Type" Width="150" />
                <GridColumn Field="DurationInMinutes" HeaderText="Duration (min)" TextAlign="TextAlign.Center" Width="140" />
                <GridColumn HeaderText="Doctors" Width="100" TextAlign="TextAlign.Center">
                    <Template>
                        <button class="btn btn-primary" @onclick="(() => ShowDoctors((context as AppointmentTypeDto).Id))">👁️</button>
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Actions" Width="200" TextAlign="TextAlign.Center">
                    <Template>
                        <button class="btn btn-warning me-2" @onclick="(() => OpenEditModal((context as AppointmentTypeDto)))">Edit</button>
                        <button class="btn btn-danger" @onclick="(() => DeleteAppointmentType((context as AppointmentTypeDto).Id))">Delete</button>
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

<!-- Modal for Doctor List -->
<SfDialog IsModal="true" Width="600px" Visible="@IsDoctorModalOpen" OnClose="OnModalClose" Header="Doctors">
    <DialogTemplates>
        <Content>
            <SfGrid DataSource="@DoctorList" AllowPaging="true">
                <GridColumns>
                    <GridColumn Field="Title.Name" HeaderText="Doctor " Width="200" />
                    <GridColumn Field="User.Name" HeaderText=" Name " Width="200" />
                    <GridColumn Field="User.Surname" HeaderText=" Surname" Width="200" />
                </GridColumns>
            </SfGrid>
        </Content>
        <FooterTemplate>
            <button class="btn btn-secondary" @onclick="() => IsDoctorModalOpen = false">Close</button>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<!-- Modal for Adding Appointment Type -->
<SfDialog IsModal="true" Width="600px" Visible="@IsAddModalOpen" Header="Add Appointment Type" OnClose="OnAddModalClose">
    <DialogTemplates>
        <Content>
            <div>
                <label>Name:</label>
                <input type="text" class="form-control" @bind="NewAppointmentType.Name" />
            </div>
            <div class="mt-2">
                <label>Duration (Minutes):</label>
                <input type="number" class="form-control" @bind="NewAppointmentType.DurationInMinutes" max="45" step="1" oninput="this.value = Math.max(0, Math.min(45, this.value))" />
            </div>
            <div class="mt-2">
                <label>Select Doctors:</label>
                <SfMultiSelect TValue="List<Guid>" TItem="DoctorListItems" Placeholder="Select Doctors" DataSource="@Doctors" @bind-Value="NewAppointmentType.DoctorIds">
                    <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </Content>
        <FooterTemplate>
            <button class="btn btn-primary" @onclick="SaveAppointmentType">Save</button>
            <button class="btn btn-secondary" @onclick="() => IsAddModalOpen = false">Cancel</button>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

<!-- Modal for Editing Appointment Type -->
<SfDialog IsModal="true" Width="600px" Visible="@IsEditModalOpen" Header="Edit Appointment Type" OnClose="OnEditModalClose">
    <DialogTemplates>
        <Content>
            <div>
                <label>Name:</label>
                <input type="text" class="form-control" @bind="EditAppointmentType.Name" />
            </div>
            <div class="mt-2">
                <label>Duration (Minutes):</label>
                <input type="number" class="form-control" @bind="EditAppointmentType.DurationInMinutes" />
            </div>
            <div class="mt-2">
                <label>Select Doctors:</label>
                <SfMultiSelect TValue="List<Guid>" TItem="DoctorListItems" Placeholder="Select Doctors" DataSource="@Doctors" @bind-Value="EditAppointmentType.DoctorIds">
                    <MultiSelectFieldSettings Text="Name" Value="Id"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </div>
        </Content>
        <FooterTemplate>
            <button class="btn btn-primary" @onclick="UpdateAppointmentType">Save</button>
            <button class="btn btn-secondary" @onclick="() => IsEditModalOpen = false">Cancel</button>
        </FooterTemplate>
    </DialogTemplates>
</SfDialog>

@code {

    private List<AppointmentTypeDto> AppointmentTypeList = new();
    private List<DoctorWithNavigationPropertiesDto> DoctorList = new();
    private AppointmentTypeCreateDto NewAppointmentType = new();
    private bool IsDoctorModalOpen = false;
    private bool IsAddModalOpen = false;
    public List<DoctorListItems> Doctors { get; set; } = new();
    private AppointmentTypeUpdateDto EditAppointmentType = new();
    private bool IsEditModalOpen = false;
    private SfToast? ToastObj;
    private static readonly MultiSelectFieldSettings DoctorDropDownFields = new()

    {
         Text = "Name", // Field to display
         Value = "Id"   // Field to use as value
    };
    protected override async Task OnInitializedAsync()
    {
        var result = await AppointmentTypeAppService.GetListAsync(new GetAppointmentTypesInput());
        AppointmentTypeList = result.Items.ToList();
        ToastObj ??= new SfToast();
    }

    private async Task ShowDoctors(Guid appointmentTypeId)
    {
        DoctorList = await AppointmentTypeAppService.GetDoctorsByAppointmentTypeIdAsync(appointmentTypeId);
        IsDoctorModalOpen = true;
    }


    private async Task OpenAddModal()
    {
        await LoadDoctors(); // Load doctors
        NewAppointmentType = new AppointmentTypeCreateDto(); // Initialize new AppointmentType DTO
        IsAddModalOpen = true; // Open modal
    }

    private async Task LoadDoctors()
    {
        var result = await DoctorsAppService.GetListAsync(new GetDoctorsInput());

        Doctors = result.Items.Select(d => new DoctorListItems
            {
                Id = d.Doctor.Id, // Doctor ID
                Name = $"{d.Doctor.TitleName} {d.Doctor.Name} {d.Doctor.SurName}" // Full name
            }).ToList();
    }

    private void OnModalClose(bool visible)
    {
        IsDoctorModalOpen = visible;
    }

    private void OnAddModalClose(bool visible)
    {
        IsAddModalOpen = visible;
    }

    private async Task SaveAppointmentType()
    {
        await AppointmentTypeAppService.CreateAsync(NewAppointmentType);
        IsAddModalOpen = false; 
        var result = await AppointmentTypeAppService.GetListAsync(new GetAppointmentTypesInput());
        AppointmentTypeList = result.Items.ToList();
    }

    private async Task OpenEditModal(AppointmentTypeDto appointmentType)
    {
        await LoadDoctors(); // Load doctors
        EditAppointmentType = new AppointmentTypeUpdateDto
            {
                Id = appointmentType.Id,
                Name = appointmentType.Name,
                DurationInMinutes = appointmentType.DurationInMinutes,
                DoctorIds = appointmentType.DoctorAppointmentTypes
            };
        IsEditModalOpen = true;
    }

    private async Task UpdateAppointmentType()
    {
        await AppointmentTypeAppService.UpdateAsync(EditAppointmentType);
        IsEditModalOpen = false;
        var result = await AppointmentTypeAppService.GetListAsync(new GetAppointmentTypesInput());
        AppointmentTypeList = result.Items.ToList();
    }

    private void OnEditModalClose(bool visible)
    {
        IsEditModalOpen = visible;
    }

    private async Task DeleteAppointmentType(Guid id)
    {
        
    
    await HandleError(async () =>
            {
                try 
                {
                    await AppointmentTypeAppService.DeleteAsync(id);
                    var result = await AppointmentTypeAppService.GetListAsync(new GetAppointmentTypesInput());
                    AppointmentTypeList = result.Items.ToList();

                        await ShowToast("Appoinment Type başarıyla silindi.", true);
                }
                catch (UserFriendlyException ex)
                {
                    await ShowToast(ex.Message, false);
                }
                catch (Exception)
                {
                    await ShowToast("Appoinment Type Silinemez.", false);
                }
            });
    
}

    public class DoctorListItems
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public async Task HandleError(Func<Task> action)
    {
        try
        {
            await action();
        }
        catch (UserFriendlyException ex)
        {
            await ShowToast(ex.Message, false);
        }
        catch (Exception)
        {
            await ShowToast("Bir hata oluştu. Lütfen tekrar deneyin.", false);
        }
    }

    private async Task ShowToast(string message, bool isSuccess = true)
    {
        await ToastObj!.ShowAsync(new ToastModel
            {
                Content = message,
                CssClass = isSuccess ? "e-toast-success" : "e-toast-danger",
                Timeout = 3000,
                ShowCloseButton = true
            });
    }
}
