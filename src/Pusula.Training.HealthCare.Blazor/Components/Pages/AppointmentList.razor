@page "/appointmentslist"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Cards
@using Pusula.Training.HealthCare.Appointments
@inject IAppointmentsAppService AppointmentAppService

<div class="container">
    <!-- Syncfusion Kartlar -->
    <div class="row mb-4">
        <!-- Toplam Hasta -->
        <div class="col-md-4">
            <SfCard CssClass="custom-card bg-primary text-white">
                <div class="e-card-header text-center">
                    <div class="e-card-header-icon mb-3">
                        <i class="fas fa-users fa-3x"></i>
                    </div>
                    <div class="e-card-header-title">Toplam Hasta</div>
                </div>
                <div class="e-card-content text-center">
                    <p class="total-count">@TotalPatients</p>
                </div>
            </SfCard>
        </div>

        <!-- Toplam Randevu -->
        <div class="col-md-4">
            <SfCard CssClass="custom-card bg-success text-white">
                <div class="e-card-header text-center">
                    <div class="e-card-header-icon mb-3">
                        <i class="fas fa-calendar-check fa-3x"></i>
                    </div>
                    <div class="e-card-header-title">Toplam Randevu</div>
                </div>
                <div class="e-card-content text-center">
                    <p class="total-count">@TotalAppointments</p>
                </div>
            </SfCard>
        </div>

        <!-- Bugünün Randevuları -->
        <div class="col-md-4">
            <SfCard CssClass="custom-card bg-warning text-white">
                <div class="e-card-header text-center">
                    <div class="e-card-header-icon mb-3">
                        <i class="fas fa-clock fa-3x"></i>
                    </div>
                    <div class="e-card-header-title">Bugünün Randevuları</div>
                </div>
                <div class="e-card-content text-center">
                    <p class="total-count">@TodaysAppointments</p>
                </div>
            </SfCard>
        </div>
    </div>
</div>


<!--Appointment List Datagrid-->
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <SfGrid DataSource="@Appointments" AllowPaging="true" AllowSorting="true" Height="600">
            <GridColumns>
                <GridColumn Field="DepartmentName" HeaderText="Department" Width="150"></GridColumn>
                <GridColumn Field="DoctorFullName" HeaderText="Doctor" Width="200"></GridColumn>
                <GridColumn Field="PatientFullName" HeaderText="Patient" Width="200"></GridColumn>
                <GridColumn Field="StartDate" HeaderText="Start Date" Format="dd/MM/yyyy HH:mm" Width="150" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="EndDate" HeaderText="End Date" Format="dd/MM/yyyy HH:mm" Width="150" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="Status" HeaderText="Status" Width="120">
                    <Template>
                        @{
                            var appointment = context as AppointmentListItem;
                        }
                        <span class="@GetStatusClass(appointment.Status)">
                            @appointment.Status
                        </span>
                    </Template>
                </GridColumn>
                <GridColumn Field="AppointmentTypeName" HeaderText="Appointment Type" Width="150"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    public List<AppointmentListItem> Appointments { get; set; } = new();
    public int TotalPatients { get; set; }
    public int TotalAppointments { get; set; }
    public int TodaysAppointments { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        var result = await AppointmentAppService.GetListAsync(new GetAppointmentsInput());
        Appointments = result.Items.Select(a => new AppointmentListItem
            {
                DepartmentName = a.Department.Name,
                DoctorFullName = $"{a.Doctor.TitleName} {a.Doctor.Name} {a.Doctor.SurName}",
                PatientFullName = $"{a.Patient.FirstName} {a.Patient.LastName}",
                StartDate = a.Appointment.StartDate,
                EndDate = a.Appointment.EndDate,
                Status = a.Appointment.AppointmentStatus.ToString(),
                AppointmentTypeName = a.AppointmentType.Name
            }).ToList();

            TotalPatients = Appointments.Select(a => a.PatientFullName).Distinct().Count();
            TotalAppointments = Appointments.Count;
            TodaysAppointments = Appointments.Count(a => a.StartDate.Date == DateTime.Today);
    }


    private string GetStatusClass(string status)
    {
        return status == "Active" ? "status-active" : "status-inactive";
    }

    public class AppointmentListItem
    {
        public string DepartmentName { get; set; }
        public string DoctorFullName { get; set; }
        public string PatientFullName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Status { get; set; }
        public string AppointmentTypeName { get; set; }
    }
}

<style>
    .custom-card {
        border-radius: 10px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
        margin: 10px 0;
        height: 180px; /* Kart yüksekliği azaltıldı */
    }

    .bg-primary {
        background-color: #007bff;
    }

    .bg-success {
        background-color: #28a745;
    }

    .bg-warning {
        background-color: #ffc107;
    }

    .text-white {
        color: #ffffff;
    }

    .e-card-header {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .e-card-header-icon {
        margin-bottom: 10px;
    }

    .e-card-header-title {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .e-card-content {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 80px; /* İçerik yüksekliği biraz azaltıldı */
    }

    .total-count {
        font-size: 3rem;
        font-weight: bold;
        color: #ffffff; /* Sayıların yazı rengi beyaz */
        margin: 0;
    }

    .status-active {
        color: green;
        font-weight: bold;
    }

    .status-inactive {
        color: red;
        font-weight: bold;
    }
</style>