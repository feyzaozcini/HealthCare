@page "/appointmentslist"
@using Syncfusion.Blazor.Grids
@using Pusula.Training.HealthCare.Appointments
@inject IAppointmentsAppService AppointmentAppService

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <SfGrid DataSource="@Appointments" AllowPaging="true" AllowSorting="true" Height="600">
            <GridColumns>
                <GridColumn Field="DepartmentName" HeaderText="Department" Width="150"></GridColumn>
                <GridColumn Field="DoctorFullName" HeaderText="Doctor" Width="200"></GridColumn>
                <GridColumn Field="PatientFullName" HeaderText="Patient" Width="200"></GridColumn>
                <GridColumn Field="StartDate" HeaderText="Start Date" Format="dd/MM/yyyy HH:mm" Width="150" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="EndDate" HeaderText="End Date" Format="dd/MM/yyyy HH:mm" Width="150" TextAlign="TextAlign.Center"></GridColumn>
                <GridColumn Field="Status" HeaderText="Status" Width="120">
                    <Template>
                        @{
                            var appointment = context as AppointmentListItem;
                        }
                        <span class="@GetStatusClass(appointment.Status)">
                            @appointment.Status
                        </span>
                    </Template>
                </GridColumn>
                <GridColumn Field="AppointmentTypeName" HeaderText="Appointment Type" Width="150"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    public List<AppointmentListItem> Appointments { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await AppointmentAppService.GetListAsync(new GetAppointmentsInput());
        Appointments = result.Items.Select(a => new AppointmentListItem
            {
                DepartmentName = a.Department.Name,
                DoctorFullName = $"{a.Doctor.TitleName} {a.Doctor.Name} {a.Doctor.SurName}",
                PatientFullName = $"{a.Patient.FirstName} {a.Patient.LastName}",
                StartDate = a.Appointment.StartDate,
                EndDate = a.Appointment.EndDate,
                Status = a.Appointment.AppointmentStatus.ToString(),
                AppointmentTypeName = a.AppointmentType.Name
            }).ToList();
    }

    private string GetStatusClass(string status)
    {
        return status == "Active" ? "status-active" : "status-inactive";
    }

    public class AppointmentListItem
    {
        public string DepartmentName { get; set; }
        public string DoctorFullName { get; set; }
        public string PatientFullName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Status { get; set; }
        public string AppointmentTypeName { get; set; }
    }
}

<style>
    .status-active {
        color: green;
        font-weight: bold;
    }

    .status-inactive {
        color: red;
        font-weight: bold;
    }
</style>